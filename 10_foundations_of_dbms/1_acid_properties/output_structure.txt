└── ./
    └── 1_acid_theory.md
    └── 1_atomicity/
        └── 2_demo.sql
        └── 1_theory.md
        └── AppExample/
            └── README.md
            └── docker-compose.yml
            └── init-db/
                └── init.sql
            └── server/
                └── package.json
                └── .env
                └── app.js
                └── prisma/
                    └── schema.prisma
                └── routes/
                    └── accounts.js

Contents of 1_acid_theory.md:

# 🔒 ACID Properties in Depth

In database systems, **ACID** is the gold standard for transaction reliability. Each letter represents a property that a DBMS must support to ensure data remains **consistent, safe, and usable** even under failure or high concurrency.

---

## 🧩 Breakdown of ACID

| Property        | Description                                           | Example Scenario                                              |
| --------------- | ----------------------------------------------------- | ------------------------------------------------------------- |
| **Atomicity**   | A transaction must be all-or-nothing.                 | Money transfer either debits AND credits, or neither happens. |
| **Consistency** | The DB must remain in a valid state before and after. | Schema rules, constraints, and relationships must hold.       |
| **Isolation**   | Concurrent transactions appear isolated.              | Alice edits profile while Bob changes password. No conflicts. |
| **Durability**  | Once committed, changes persist despite crashes.      | After power loss, you still see your last payment was saved.  |

---

## ✅ Why It Matters

Without ACID, you might face:

- Partial writes
- Dirty reads
- Corrupted data after a system crash
- Lost transactions in high concurrency apps

---

## 💡 Real DBMS Support

| DBMS           | Atomicity | Consistency | Isolation     | Durability    |
| -------------- | --------- | ----------- | ------------- | ------------- |
| PostgreSQL     | ✅        | ✅          | ✅ MVCC       | ✅ WAL        |
| MySQL (InnoDB) | ✅        | ✅          | ✅ Locks      | ✅ WAL        |
| SQLite         | ✅        | ✅          | ✅ Serialized | ✅ Journaling |

> Even lightweight DBMSs like SQLite implement ACID using **journals** and **locking mechanisms**.

---

## 🧪 Coming Up

In the next file `2_acid_sql_demo.sql`, you’ll test these properties in SQL using:

- BEGIN / COMMIT / ROLLBACK
- Violating constraints
- Simulating crash scenarios

➡️ After that, we’ll break down what each query is doing in `2_acid_sql_demo_explained.md`.


Contents of 1_atomicity/2_demo.sql:

-- 🧪 SQL Atomicity Demo

-- ✅ Success Case: Money transfer from Alice to Bob
BEGIN;

UPDATE account SET balance = balance - 100 WHERE name = 'Alice';
UPDATE account SET balance = balance + 100 WHERE name = 'Bob';

COMMIT;

-- ❌ Failure Case: Simulate error to trigger rollback
BEGIN;

UPDATE account SET balance = balance - 100 WHERE name = 'Alice';
UPDATE account SET balance = balance + (100 / 0) WHERE name = 'Bob'; -- force error

ROLLBACK;


Contents of 1_atomicity/1_theory.md:

# 💥 Atomicity — All or Nothing

**Atomicity** is the principle that a transaction must either complete in full or have no effect at all. There is no "partial success" in a reliable database system.

---

## 📌 Real-World Analogy

Imagine withdrawing money from an ATM:

- You insert your card
- You request $100
- The system debits your account
- Then gives you cash

If the system debits your account **but crashes before giving the cash**, atomicity ensures that the **debit is undone** — either all steps succeed, or none.

---

## 💡 Formal Definition

> A transaction is **atomic** if it is indivisible:  
> either all its operations are executed, or none are.

Atomicity is enforced using:

- **Rollback logs**
- **Undo buffers**
- **Transaction boundaries** (`BEGIN`, `ROLLBACK`, `COMMIT`)

---

## 🚫 Without Atomicity

| Scenario                          | What Happens                     |
| --------------------------------- | -------------------------------- |
| Insert succeeds, then crash       | Partial data, inconsistent state |
| Multi-table update fails midway   | One table updated, others not    |
| Constraint violation after update | Database left in invalid state   |

---

## 📄 Demo Summary

We simulate a money transfer between two users:

- Decrease `Alice`'s balance
- Increase `Bob`'s balance

To ensure **atomicity**, both updates are wrapped in a SQL `BEGIN ... COMMIT` transaction block. If something fails, we roll back the entire transaction.

---

## ✅ Success Scenario

```sql
BEGIN;

UPDATE account SET balance = balance - 100 WHERE name = 'Alice';
UPDATE account SET balance = balance + 100 WHERE name = 'Bob';

COMMIT;
```

This transfers 100 from Alice to Bob.

---

## ❌ Failure Scenario

```sql
BEGIN;

UPDATE account SET balance = balance - 100 WHERE name = 'Alice';
UPDATE account SET balance = balance + (100 / 0) WHERE name = 'Bob'; -- force error

ROLLBACK;
```

In this case:

- The second line throws a division-by-zero error
- PostgreSQL aborts the transaction
- The `ROLLBACK` ensures **Alice’s balance is unchanged**

---

## 💡 Why This Proves Atomicity

| Guarantee      | Explanation                                            |
| -------------- | ------------------------------------------------------ |
| All-or-Nothing | Either both balances are updated, or none are          |
| Safe Failure   | If any operation fails, all changes are rolled back    |
| Manual Control | Uses `BEGIN`, `ROLLBACK`, `COMMIT` to manage atomicity |


Contents of 1_atomicity/AppExample/README.md:

# 💾 Atomicity Demo with PostgreSQL, Prisma, and Docker

This project demonstrates the **Atomicity** property of ACID in a real-world money transfer system. It uses:

- 🐘 PostgreSQL (via Docker) for reliable storage
- ⚙️ Prisma ORM (with explicit table mapping)
- 🚀 Express.js (Node.js) as the API layer

The goal is to show that **a transfer operation either fully succeeds (both accounts updated) or fully fails (no change at all)** — exactly what atomicity means.

---

## 📚 What Is Atomicity?

**Atomicity** ensures that **all operations in a transaction are treated as a single unit** — they either all succeed or none of them are applied.

In this case:

- If Alice sends Bob $100,
  - ✅ Alice’s balance must decrease by $100
  - ✅ Bob’s balance must increase by $100
- If either operation fails (e.g., Bob doesn’t exist),
  - ❌ **Neither account should be changed**

This is implemented using **Prisma’s `$transaction()`**, which wraps multiple operations into a single all-or-nothing database transaction.

---

## 📁 Project Structure

```txt
.
├── docker-compose.yml          # Starts PostgreSQL and seeds DB using init.sql
├── init-db/
│   └── init.sql                # SQL script that creates `account` table and seeds Alice & Bob
└── server/
    ├── .env                    # DB connection string
    ├── app.js                  # Express.js server entry point
    ├── package.json            # Dependencies (Prisma, Express, etc.)
    ├── prisma/
    │   └── schema.prisma       # Prisma model mapped to lowercase SQL table
    └── routes/
        └── accounts.js         # API routes to get accounts and transfer money
```

---

## ⚙️ Setup Instructions

### 1. 🐳 Start the PostgreSQL Database

This creates the `bankdb` database and initializes the `account` table.

```bash
docker compose up -d
```

> It uses `init-db/init.sql` to define the table and seed Alice and Bob.

---

### 2. 📦 Install Server Dependencies

```bash
cd server
npm install
```

---

### 3. 🔧 Generate the Prisma Client

```bash
npx prisma generate
```

> Prisma reads `schema.prisma`, which maps the `Account` model to the actual lowercase table:

```prisma
model Account {
  ...
  @@map("account")
}
```

---

### 4. 🚀 Start the API Server

```bash
nodemon app.js
```

Visit: [http://localhost:3001/api/accounts](http://localhost:3001/api/accounts)

You should see:

```json
[
  { "id": 1, "name": "Alice", "balance": 1000 },
  { "id": 2, "name": "Bob", "balance": 500 }
]
```

---

## 🔁 Transfer Route: Proving Atomicity

### Endpoint

```
POST /api/accounts/transfer
Content-Type: application/json
```

### Payload

```json
{
  "from": "Alice",
  "to": "Bob",
  "amount": 100
}
```

### Behavior

This executes:

```js
await prisma.$transaction([
  prisma.Account.update({
    where: { name: from },
    data: { balance: { decrement: amount } },
  }),
  prisma.Account.update({
    where: { name: to },
    data: { balance: { increment: amount } },
  }),
]);
```

- If **both succeed** → COMMIT ✅
- If **either fails** (e.g., Bob doesn’t exist) → ROLLBACK ❌

---

### 🔬 Test Failure (Rollback)

```json
{
  "from": "Alice",
  "to": "Charlie",
  "amount": 100
}
```

- Charlie doesn't exist → second update fails
- Alice’s balance **remains unchanged**
- Response:
  ```json
  {
    "success": false,
    "message": "No 'Charlie' found"
  }
  ```

---

## ✅ Why Atomicity Is Guaranteed

1. **Transaction Used**: Prisma’s `$transaction()` wraps both balance updates in a true SQL transaction.
2. **Rollback-on-Failure**: If either update fails (e.g. due to a constraint, bad name), Prisma automatically rolls back the entire transaction.
3. **PostgreSQL Reliability**: PostgreSQL enforces transactional semantics and ACID guarantees.
4. **Balance Constraints**: The schema has a `CHECK (balance >= 0)` to prevent invalid writes.

---

## 🧠 Summary

| Feature               | Description                                      |
| --------------------- | ------------------------------------------------ |
| 🔄 Transaction Safety | Ensures full transfer succeeds or fails entirely |
| 🔐 ACID: Atomicity    | No partial update; DB is never left inconsistent |
| 📦 Tech Stack         | PostgreSQL + Prisma + Docker + Express           |


Contents of 1_atomicity/AppExample/docker-compose.yml:

version: "3.8"

services:
  db:
    image: postgres:15
    container_name: pg_transfer_example_container
    restart: always
    environment:
      POSTGRES_DB: bankdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432"
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d


Contents of 1_atomicity/AppExample/init-db/init.sql:

-- Create a single 'account' table
CREATE TABLE IF NOT EXISTS account (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  balance NUMERIC(12, 2) NOT NULL CHECK (balance >= 0)
);

-- Seed data: Alice and Bob
INSERT INTO account (name, balance)
VALUES
  ('Alice', 1000.00),
  ('Bob', 500.00)
ON CONFLICT (name) DO NOTHING;


Contents of 1_atomicity/AppExample/server/package.json:

{
  "type": "module",
  "dependencies": {
    "@prisma/client": "^6.7.0",
    "cors": "^2.8.5",
    "express": "^5.1.0",
    "nodemon": "^3.1.10"
  },
  "devDependencies": {
    "prisma": "^6.7.0"
  }
}


Contents of 1_atomicity/AppExample/server/.env:

DATABASE_URL="postgresql://admin:secret@localhost:5432/bankdb"


Contents of 1_atomicity/AppExample/server/app.js:

import cors from "cors";
import express from "express";
import accountRoutes from "./routes/accounts.js";

const app = express();
app.use(cors());
app.use(express.json());

app.use("/api/accounts", accountRoutes);

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});


Contents of 1_atomicity/AppExample/server/prisma/schema.prisma:

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id      Int    @id @default(autoincrement())
    name    String @unique
    balance Float  @default(0)

    @@map("account")
}


Contents of 1_atomicity/AppExample/server/routes/accounts.js:

import { PrismaClient } from "@prisma/client";
import express from "express";

const prisma = new PrismaClient();
const router = express.Router();

// ✅ Uppercase "A" matches model name in schema.prisma
router.get("/", async (_, res) => {
  const accounts = await prisma.Account.findMany();
  res.json(accounts);
});

router.post("/transfer", async (req, res) => {
  const { from, to, amount } = req.body;

  try {
    await prisma.$transaction([
      prisma.Account.update({
        where: { name: from },
        data: { balance: { decrement: amount } },
      }),
      prisma.Account.update({
        where: { name: to },
        data: { balance: { increment: amount } },
      }),
    ]);

    res.json({ success: true });
  } catch (err) {
    res.status(400).json({ success: false, message: err.message });
  }
});

export default router;


